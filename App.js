
import React, { Component } from 'react';
import { AppRegistry, NativeAppEventEmitter, NativeModules } from 'react-native';
import {
  ZaptMap,
  getMapLink,
  addLocationListener,
  calculateLocation,
  initialize,
  requestPermissionsBackground,
  setDisableSyncingForAnalytics,
  setDisableSyncingForPositioning
} from 'react-native-zapt-sdk'

const placeID = '-ltvysf4acgzdxdhf81y';

class App extends Component {
  state = {};

  /*
   * example of customizing map options. See all options: 
   *  http://docs.zapt.tech/#Op%C3%A7%C3%B5esdeLayout
   */
  options = {
      floorId: 1,
      zoom: -3,
      appBar: true
  };

  async componentDidMount() {
    // this.simpleExample();

    //uncomment below and comment simpleExample to see background working.
    this.backgroundExample();
  }

  async simpleExample(){
    await initialize(placeID);
    await requestPermissions();
  }

  /**
   * (Ignore this code if you dont need background location)
   * In order to background works, make sure to:
   * Android:
   *  0) add AppRegistry.registerHeadlessTask like in the bottom of this file
   *  1) add the entry ACCESS_BACKGROUND_LOCATION in the AndroidManifest
   *  2) Add the init at the Application.java (see docs)
   *  3) Test it using release deploy, in a real device.
   * 
   * iOS:
   *  1) add the entry 'Privacy - Location Always Usage Description' in the Info.plist
   *  2) add the 'background mode' 
   */
  async backgroundExample(){
    await initialize(placeID);
    await requestPermissionsBackground({
      titleAlert: "Esse app necessita de acesso a localização",
      messageAlert: "Para te apresentarmos notificações por proximidades necessitamos da permissão de localização sempre",
      titleNoGranted: "Funcionalidade limitada sem a permissão de localização",
      messageNoGranted: "Como a permissão de localização o tempo todo não foi concedida esse ap não vai te enviar as melhores notificações por proximidade. Para alterar a permissão acesse: Configurações -> Aplicativos -> Permissões e conceda a permissão total"
    });
    setDisableSyncingForAnalytics(false);
    setDisableSyncingForPositioning(true);

    NativeAppEventEmitter.addListener('ReactNativeZaptSdkBeaconsFound', (event)=>{
      console.info('beacon found event', event);
    });

    NativeAppEventEmitter.addListener('ReactNativeZaptSdkBeaconsRegionExit', (event) => {
      console.info('ReactNativeZaptSdkBeaconsRegionExit', event);
    });

    NativeAppEventEmitter.addListener('ReactNativeZaptSdkBeaconsRegionEnter', (event) => {
      console.info('ReactNativeZaptSdkBeaconsRegionEnter', event);
    });

    addLocationListener(placeID, (location)=> {
      console.info('Location found', location);
    });
  }

  /**
    * (Ignore this code if you dont need the map link)
    * Example of getting the map link generated by the SDK
    */
  async getMapLinkExample(){
    let mapLink = await getMapLink(placeID, this.options);
    this.setState({
      mapLink: mapLink
    });
  }

  render() {
    return <ZaptMap
      placeID={placeID}
      options={this.options}
    />
  }
}

 /**
   * (Ignore this code if you dont need background location)
   */
//Android background notifications
AppRegistry.registerHeadlessTask('ReactNativeZaptSdkBeaconsFound', ()=>{
  return function(data) {
    return new Promise(async (resolve)=>{
      console.info('JS ReactNativeZaptSdkBeaconsFound', data);
      if(data && data.beacons) {
        try {
          let beacons = JSON.parse(data.beacons);
          let location = await calculateLocation(placeID, beacons);
          if(location) {
            console.info('Location found', location);
          }
        } catch (error) {
          console.error(error);
        }
      }
      resolve();
    });
  }
});

export default App;
